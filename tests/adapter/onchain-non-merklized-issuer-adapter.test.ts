import { OnchainNonMerklizedIssuerAdapter } from '../../src/onchain-credential-adapter/version/v0.0.1/onchain-non-merklized-issuer-adapter';
import { ethers } from 'ethers';
import nock from 'nock';
import { DID, Id, ChainIds } from '@iden3/js-iden3-core'
import abi from '../../src/onchain-credential-adapter/version/v0.0.1/NonMerklizedIssuerBase.json'
import { INonMerklizedIssuer } from '../../src/onchain-credential-adapter/version/v0.0.1/types/NonMerklizedIssuerBase';
import fs from 'fs';
import path from 'path';
import { expect } from 'chai';
import w3cHttpSchemaExpect from './testdata/golang_http_schema.json'
import w3cIpfsSchemaExpect from './testdata/golang_ipfs_schema.json'
import { W3CCredential } from '../../src/verifiable';

const chainInfo = (did: DID): {contractAddress: string, chainId: number} => {
    const issuerId = DID.idFromDID(did);
    const contractAddress   = ethers.getAddress(ethers.hexlify(Id.ethAddressFromId(issuerId)));
    const chainId = ChainIds[`${DID.blockchainFromId(issuerId)}:${DID.networkIdFromId(issuerId)}`];
    return {contractAddress, chainId};
}

describe('Convertor v0.0.1', () => {
    it('Test adapter with https schema', async () => {
        nock('http://localhost:8545')
        .post('/', {
            id: 1,
            jsonrpc: '2.0',
            method: 'eth_chainId',
            params: []
        })
        .reply(200, {
            jsonrpc: '2.0',
            id: 1,
            result: '0x1'
        });

        nock('http://localhost:8545')
        .post('/', [
            {
                method: 'eth_chainId',
                params: [],
                id: 1,
                jsonrpc: '2.0'
            },
            {
                method: 'eth_call',
                params: [
                    {
                        to: '0xc84e8ac5385e0813f01aa9c698ed44c831961670',
                        data: '0xb37feda415bbb043d40cadbd377aeb19ef410cd8adb55a41c63707a628fefa0fac2c3ba1'
                    },
                    'latest'
                ],
                id: 2,
                jsonrpc: '2.0'
            }
        ])
        .reply(200, [
            {
                jsonrpc: '2.0',
                id: 1,
                result: '0x1'
            },
            {
                jsonrpc: '2.0',
                id: 2,
                result: fs.readFileSync(path.resolve(__dirname, 'testdata/http_resp_eth_mtp_proof_onchain_issuer.txt')).toString()
            }
        ]);
      
        const issuerDid = DID.parse('did:polygonid:polygon:mumbai:2qCU58EJgrEMJvPfhUCnFCwuKQTkX8VmJX2sJCH6C8');
        const hexResponse = '0x00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000a6ff88524b07a4eaab4d733c595172ff5000d60ad1dea10b097b1ab7638b962383c12d17575437e63c9786fff897f12020000000000000000000000007317d19889c6dcc9ce9b894133d33d8d51cbb60e000000000000000000000000000000000000000000000000026aa26cb85e6dd1000000000000000000000000000000000000000065feb77600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000620000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000065d72a7600000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a368747470733a2f2f676973742e67697468756275736572636f6e74656e742e636f6d2f696c79612d6b6f726f7479612f36363034393663383539663864333161376432613932636135653937303936372f7261772f366235666331346665363330633137626661353265303565303866646338333934633565613063652f6e6f6e2d6d65726b6c697a65642d6e6f6e2d7a65726f2d62616c616e63652e6a736f6e6c640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003868747470733a2f2f736368656d612e6964656e332e696f2f636f72652f6a736f6e6c642f646973706c61794d6574686f642e6a736f6e6c640000000000000000000000000000000000000000000000000000000000000000000000000000000742616c616e6365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a168747470733a2f2f676973742e67697468756275736572636f6e74656e742e636f6d2f696c79612d6b6f726f7479612f65313063643739613863633236616236653430343030613131383338363137652f7261772f353735656463333364343835653261346338303662616164393765323131313766336339306139662f6e6f6e2d6d65726b6c697a65642d6e6f6e2d7a65726f2d62616c616e63652e6a736f6e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e4a736f6e536368656d6132303233000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d53386559385a436941415738716778335436535133484447656464774c5a736a50584e415a45785177525934000000000000000000000000000000000000000000000000000000000000000000000000000000000000194964656e334261736963446973706c61794d6574686f645631000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000026aa26cb85e6dd100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000762616c616e636500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007317d19889c6dcc9ce9b894133d33d8d51cbb60e00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000761646472657373000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
        
        const iface = new ethers.Interface(abi);
        const res = iface.decodeFunctionResult("getCredential", hexResponse);

        const { chainId, contractAddress } = chainInfo(issuerDid);
        const adapter = new OnchainNonMerklizedIssuerAdapter(
            'http://localhost:8545',
            contractAddress,
            chainId,
            issuerDid,
        );
        const w3cCredential = await adapter.convertOnChainInfoToW3CCredential(
            res[0] as INonMerklizedIssuer.CredentialDataStructOutput, 
            res[1] as bigint[], 
            res[2] as INonMerklizedIssuer.SubjectFieldStructOutput[],
        );
        expect(W3CCredential.fromJSON(w3cHttpSchemaExpect)).to.deep.equal(w3cCredential);
    });
    it('Test adapter with ipfs schema', async () => {
        nock('http://localhost:8545')
        .post('/', {
            id: 1,
            jsonrpc: '2.0',
            method: 'eth_chainId',
            params: []
        })
        .reply(200, {
            jsonrpc: '2.0',
            id: 1,
            result: '0x1'
        });

        nock('http://localhost:8545')
        .post('/', [
            {
                method: 'eth_chainId',
                params: [],
                id: 1,
                jsonrpc: '2.0'
            },
            {
                method: 'eth_call',
                params: [
                    {
                        to: '0xfdb204ccc55794c861366dbc2cd6bbbd25752894',
                        data: '0xb37feda41cc706418245dd0f41d3eadc04b1a03c35e8885bac81a23749e7c756c9568c18'
                    },
                    'latest'
                ],
                id: 2,
                jsonrpc: '2.0'
            }
        ])
        .reply(200, [
            {
                jsonrpc: '2.0',
                id: 1,
                result: '0x1'
            },
            {
                jsonrpc: '2.0',
                id: 2,
                result: fs.readFileSync(path.resolve(__dirname, 'testdata/http_resp_eth_mtp_proof_onchain_issuer.txt')).toString()
            }
        ]);
      
        const issuerDid = DID.parse('did:polygonid:polygon:amoy:2qQ68JkRcf3z3923i5rrszrsJ4kdu4GKWARQ5eftsB');
        const hexResponse = '0x00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000a6ff88524b07a4eaab4d733c595172ff5000d5f21b8254fbda2754f4a1fea8ddf5989b399d21ce61ed7a3451359d013020000000000000000000000007317d19889c6dcc9ce9b894133d33d8d51cbb60e000000000000000000000000000000000000000000000001dab4a070ddad3b3b00000000000000000000000000000000000000006650bf1c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000006629321c000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d613542346a4e776948745264355258476f526e63563739455a7642374c7366704867763856693478697456310000000000000000000000000000000000000000000000000000000000000000000000000000000000003868747470733a2f2f736368656d612e6964656e332e696f2f636f72652f6a736f6e6c642f646973706c61794d6574686f642e6a736f6e6c640000000000000000000000000000000000000000000000000000000000000000000000000000000742616c616e636500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d634337693150435538796d4a7363476a733870716d5a45577442475750464c6d513873375036517a454c4e360000000000000000000000000000000000000000000000000000000000000000000000000000000000000e4a736f6e536368656d6132303233000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d53386559385a436941415738716778335436535133484447656464774c5a736a50584e415a45785177525934000000000000000000000000000000000000000000000000000000000000000000000000000000000000194964656e334261736963446973706c61794d6574686f645631000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000001dab4a070ddad3b3b00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000762616c616e636500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007317d19889c6dcc9ce9b894133d33d8d51cbb60e00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000761646472657373000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
        
        const iface = new ethers.Interface(abi);
        const res = iface.decodeFunctionResult("getCredential", hexResponse);


        const { chainId, contractAddress } = chainInfo(issuerDid);
        const adapter = new OnchainNonMerklizedIssuerAdapter(
            'http://localhost:8545',
            contractAddress,
            chainId,
            issuerDid,
            {
                ipfsGatewayURL: 'https://ipfs.io'
            }
        );
        const w3cCredential = await adapter.convertOnChainInfoToW3CCredential(
            res[0] as INonMerklizedIssuer.CredentialDataStructOutput, 
            res[1] as bigint[], 
            res[2] as INonMerklizedIssuer.SubjectFieldStructOutput[],
        );                
        expect(W3CCredential.fromJSON(w3cIpfsSchemaExpect)).to.deep.eq(w3cCredential);
    });
});
