import { OnchainNonMerklizedIssuerAdapter } from '../../src/storage/blockchain/onchain-issuer-adapter/non-merklized/version/v0.0.1/onchain-non-merklized-issuer-adapter';
import { ethers } from 'ethers';
import nock from 'nock';
import { DID } from '@iden3/js-iden3-core';
import {
  NonMerklizedIssuerBaseABI as abi,
  INonMerklizedIssuer
} from '@iden3/onchain-non-merklized-issuer-base-abi';
import { W3CCredential } from '../../src/verifiable';
import { IPFS_URL } from '../helpers';
import { defaultEthConnectionConfig } from '../../src';
import { schemaLoaderForTests } from '../mocks/schema';
import { describe, expect, it } from 'vitest';

// prettier-ignore
const w3cHttpSchemaExpect =
  {"id":"urn:iden3:onchain:80001:0xc84e8ac5385E0813f01aA9C698ED44C831961670:0","@context":["https://www.w3.org/2018/credentials/v1","https://schema.iden3.io/core/jsonld/iden3proofs.jsonld","https://gist.githubusercontent.com/ilya-korotya/660496c859f8d31a7d2a92ca5e970967/raw/6b5fc14fe630c17bfa52e05e08fdc8394c5ea0ce/non-merklized-non-zero-balance.jsonld","https://schema.iden3.io/core/jsonld/displayMethod.jsonld"],"type":["VerifiableCredential","Balance"],"expirationDate":"2024-03-23T11:05:26.000Z","issuanceDate":"2024-02-22T11:05:26.000Z","credentialSubject":{"address":"657065114158124047812701241180089030040156354062","balance":"174130123440549329","id":"did:polygonid:polygon:mumbai:2qJFtKfABTJi2yUAcUhuvUnDojuNwUJjhuXQDhUg3e","type":"Balance"},"credentialStatus":{"id":"did:polygonid:polygon:mumbai:2qCU58EJgrEMJvPfhUCnFCwuKQTkX8VmJX2sJCH6C8/credentialStatus?revocationNonce=0\u0026contractAddress=80001:0xc84e8ac5385E0813f01aA9C698ED44C831961670","type":"Iden3OnchainSparseMerkleTreeProof2023","revocationNonce":0},"issuer":"did:polygonid:polygon:mumbai:2qCU58EJgrEMJvPfhUCnFCwuKQTkX8VmJX2sJCH6C8","credentialSchema":{"id":"https://gist.githubusercontent.com/ilya-korotya/e10cd79a8cc26ab6e40400a11838617e/raw/575edc33d485e2a4c806baad97e21117f3c90a9f/non-merklized-non-zero-balance.json","type":"JsonSchema2023"},"proof":[{"type":"Iden3SparseMerkleTreeProof","issuerData":{"id":"did:polygonid:polygon:mumbai:2qCU58EJgrEMJvPfhUCnFCwuKQTkX8VmJX2sJCH6C8","state":{"rootOfRoots":"19a633fecfa2117672bbcfb65307e3bd73101cd3dd49b849ea231b5927afc70e","claimsTreeRoot":"3ca701ead4d7da0eb5c4950ac0950a7ae92f4acc853a24698489f5a9b08fc72e","revocationTreeRoot":"0000000000000000000000000000000000000000000000000000000000000000","value":"6f5dd91f13004cca5c8b31524239de77ce149a9073d7ace737a1b7cffb96ab26"}},"coreClaim":"f52f1795c533d7b4aa4e7ab02485f86f0a00000000000000000000000000000002127f89ff6f78c9637e437575d1123c3862b93876abb197b010ea1dad600d000eb6cb518d3dd33341899bcec9dcc68998d11773000000000000000000000000d16d5eb86ca26a02000000000000000000000000000000000000000000000000000000000000000076b7fe650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","mtp":{"existence":true,"siblings":["4692761366944891051814480185546124875872606319832740381039122455881379612023"]}}],"displayMethod":{"id":"ipfs://QmS8eY8ZCiAAW8qgx3T6SQ3HDGeddwLZsjPXNAZExQwRY4","type":"Iden3BasicDisplayMethodV1"}};
// prettier-ignore
const w3cIpfsSchemaExpect =
  {"@context":["https://www.w3.org/2018/credentials/v1","https://schema.iden3.io/core/jsonld/iden3proofs.jsonld","ipfs://Qma5B4jNwiHtRd5RXGoRncV79EZvB7LsfpHgv8Vi4xitV1","https://schema.iden3.io/core/jsonld/displayMethod.jsonld"],"credentialSchema":{"id":"ipfs://QmcC7i1PCU8ymJscGjs8pqmZEWtBGWPFLmQ8s7P6QzELN6","type":"JsonSchema2023"},"credentialStatus":{"id":"did:polygonid:polygon:amoy:2qQ68JkRcf3z3923i5rrszrsJ4kdu4GKWARQ5eftsB/credentialStatus?revocationNonce=0&contractAddress=80002:0xFDb204CCC55794C861366dBc2Cd6BBBd25752894","revocationNonce":0,"type":"Iden3OnchainSparseMerkleTreeProof2023"},"credentialSubject":{"address":"657065114158124047812701241180089030040156354062","balance":"34206141476401658683","id":"did:polygonid:polygon:amoy:2qZYiH9CFMoo6oTjSEot3qzkHFHhjLRLKp8yfwCYng","type":"Balance"},"displayMethod":{"id":"ipfs://QmS8eY8ZCiAAW8qgx3T6SQ3HDGeddwLZsjPXNAZExQwRY4","type":"Iden3BasicDisplayMethodV1"},"expirationDate":"2024-05-24T16:23:56.000Z","id":"urn:iden3:onchain:80002:0xFDb204CCC55794C861366dBc2Cd6BBBd25752894:0","issuanceDate":"2024-04-24T16:23:56.000Z","issuer":"did:polygonid:polygon:amoy:2qQ68JkRcf3z3923i5rrszrsJ4kdu4GKWARQ5eftsB","proof":[{"coreClaim":"f52f1795c533d7b4aa4e7ab02485f86f0a0000000000000000000000000000000213d0591345a3d71ee61cd299b38959df8dea1f4a4f75a2bd4f25b8215f0d000eb6cb518d3dd33341899bcec9dcc68998d117730000000000000000000000003b3baddd70a0b4da01000000000000000000000000000000000000000000000000000000000000001cbf50660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","issuerData":{"id":"did:polygonid:polygon:amoy:2qQ68JkRcf3z3923i5rrszrsJ4kdu4GKWARQ5eftsB","state":{"claimsTreeRoot":"3ca701ead4d7da0eb5c4950ac0950a7ae92f4acc853a24698489f5a9b08fc72e","revocationTreeRoot":"0000000000000000000000000000000000000000000000000000000000000000","rootOfRoots":"19a633fecfa2117672bbcfb65307e3bd73101cd3dd49b849ea231b5927afc70e","value":"6f5dd91f13004cca5c8b31524239de77ce149a9073d7ace737a1b7cffb96ab26"}},"mtp":{"existence":true,"siblings":["4692761366944891051814480185546124875872606319832740381039122455881379612023"]},"type":"Iden3SparseMerkleTreeProof"}],"type":["VerifiableCredential","Balance"]};

const mockedState =
  '0x00000000000000000000000000000000000000000000000000000000000000a026ab96fbcfb7a137e7acd773909a14ce77de394252318b5cca4c00131fd95d6f2ec78fb0a9f5898469243a85cc4a2fe97a0a95c00a95c4b50edad7d4ea01a73c00000000000000000000000000000000000000000000000000000000000000000ec7af27591b23ea49b849ddd31c1073bde30753b6cfbb727611a2cffe33a6192ec78fb0a9f5898469243a85cc4a2fe97a0a95c00a95c4b50edad7d4ea01a73c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000010015bbb043d40cadbd377aeb19ef410cd8adb55a41c63707a628fefa0fac2c3ba126280d1f3ca6d144c0fedf0519644786c96d821dcc947576ecbbb4a175279ab700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000280a6002414282733c9a4a2b7ccf5ad7cd2d9eea2c6cf0c03d7dbac53da6a

describe('Convertor v0.0.1', () => {
  it('Test adapter with https schema', async () => {
    nock('http://localhost:8545')
      .post('/', {
        id: 1,
        jsonrpc: '2.0',
        method: 'eth_chainId',
        params: []
      })
      .reply(200, {
        jsonrpc: '2.0',
        id: 1,
        result: '0x1'
      });

    nock('http://localhost:8545')
      .post('/', [
        {
          method: 'eth_chainId',
          params: [],
          id: 1,
          jsonrpc: '2.0'
        },
        {
          method: 'eth_call',
          params: [
            {
              to: '0xc84e8ac5385e0813f01aa9c698ed44c831961670',
              data: '0xb37feda415bbb043d40cadbd377aeb19ef410cd8adb55a41c63707a628fefa0fac2c3ba1'
            },
            'latest'
          ],
          id: 2,
          jsonrpc: '2.0'
        }
      ])
      .reply(200, [
        {
          jsonrpc: '2.0',
          id: 1,
          result: '0x1'
        },
        {
          jsonrpc: '2.0',
          id: 2,
          result: mockedState
        }
      ]);

    const issuerDid = DID.parse(
      'did:polygonid:polygon:mumbai:2qCU58EJgrEMJvPfhUCnFCwuKQTkX8VmJX2sJCH6C8'
    );
    const hexResponse =
      '0x00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000a6ff88524b07a4eaab4d733c595172ff5000d60ad1dea10b097b1ab7638b962383c12d17575437e63c9786fff897f12020000000000000000000000007317d19889c6dcc9ce9b894133d33d8d51cbb60e000000000000000000000000000000000000000000000000026aa26cb85e6dd1000000000000000000000000000000000000000065feb77600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000620000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000065d72a7600000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a368747470733a2f2f676973742e67697468756275736572636f6e74656e742e636f6d2f696c79612d6b6f726f7479612f36363034393663383539663864333161376432613932636135653937303936372f7261772f366235666331346665363330633137626661353265303565303866646338333934633565613063652f6e6f6e2d6d65726b6c697a65642d6e6f6e2d7a65726f2d62616c616e63652e6a736f6e6c640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003868747470733a2f2f736368656d612e6964656e332e696f2f636f72652f6a736f6e6c642f646973706c61794d6574686f642e6a736f6e6c640000000000000000000000000000000000000000000000000000000000000000000000000000000742616c616e6365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a168747470733a2f2f676973742e67697468756275736572636f6e74656e742e636f6d2f696c79612d6b6f726f7479612f65313063643739613863633236616236653430343030613131383338363137652f7261772f353735656463333364343835653261346338303662616164393765323131313766336339306139662f6e6f6e2d6d65726b6c697a65642d6e6f6e2d7a65726f2d62616c616e63652e6a736f6e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e4a736f6e536368656d6132303233000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d53386559385a436941415738716778335436535133484447656464774c5a736a50584e415a45785177525934000000000000000000000000000000000000000000000000000000000000000000000000000000000000194964656e334261736963446973706c61794d6574686f645631000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000026aa26cb85e6dd100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000762616c616e636500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007317d19889c6dcc9ce9b894133d33d8d51cbb60e00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000761646472657373000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';

    const iface = new ethers.Interface(abi);
    const res = iface.decodeFunctionResult('getCredential', hexResponse);

    const adapter = new OnchainNonMerklizedIssuerAdapter(
      {
        ...defaultEthConnectionConfig,
        url: 'http://localhost:8545',
        chainId: 80001
      },
      issuerDid
    );
    const w3cCredential = await adapter.convertOnChainInfoToW3CCredential(
      res[0] as INonMerklizedIssuer.CredentialDataStructOutput,
      res[1] as bigint[],
      res[2] as INonMerklizedIssuer.SubjectFieldStructOutput[]
    );
    expect(W3CCredential.fromJSON(w3cHttpSchemaExpect)).to.deep.equal(w3cCredential);
  });
  it('Test adapter with ipfs schema', async () => {
    nock('http://localhost:8545')
      .post('/', {
        id: 1,
        jsonrpc: '2.0',
        method: 'eth_chainId',
        params: []
      })
      .reply(200, {
        jsonrpc: '2.0',
        id: 1,
        result: '0x1'
      });

    nock('http://localhost:8545')
      .post('/', [
        {
          method: 'eth_chainId',
          params: [],
          id: 1,
          jsonrpc: '2.0'
        },
        {
          method: 'eth_call',
          params: [
            {
              to: '0xfdb204ccc55794c861366dbc2cd6bbbd25752894',
              data: '0xb37feda41cc706418245dd0f41d3eadc04b1a03c35e8885bac81a23749e7c756c9568c18'
            },
            'latest'
          ],
          id: 2,
          jsonrpc: '2.0'
        }
      ])
      .reply(200, [
        {
          jsonrpc: '2.0',
          id: 1,
          result: '0x1'
        },
        {
          jsonrpc: '2.0',
          id: 2,
          result: mockedState
        }
      ]);

    const issuerDid = DID.parse(
      'did:polygonid:polygon:amoy:2qQ68JkRcf3z3923i5rrszrsJ4kdu4GKWARQ5eftsB'
    );
    const hexResponse =
      '0x00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000a6ff88524b07a4eaab4d733c595172ff5000d5f21b8254fbda2754f4a1fea8ddf5989b399d21ce61ed7a3451359d013020000000000000000000000007317d19889c6dcc9ce9b894133d33d8d51cbb60e000000000000000000000000000000000000000000000001dab4a070ddad3b3b00000000000000000000000000000000000000006650bf1c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000006629321c000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d613542346a4e776948745264355258476f526e63563739455a7642374c7366704867763856693478697456310000000000000000000000000000000000000000000000000000000000000000000000000000000000003868747470733a2f2f736368656d612e6964656e332e696f2f636f72652f6a736f6e6c642f646973706c61794d6574686f642e6a736f6e6c640000000000000000000000000000000000000000000000000000000000000000000000000000000742616c616e636500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d634337693150435538796d4a7363476a733870716d5a45577442475750464c6d513873375036517a454c4e360000000000000000000000000000000000000000000000000000000000000000000000000000000000000e4a736f6e536368656d6132303233000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d53386559385a436941415738716778335436535133484447656464774c5a736a50584e415a45785177525934000000000000000000000000000000000000000000000000000000000000000000000000000000000000194964656e334261736963446973706c61794d6574686f645631000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000001dab4a070ddad3b3b00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000762616c616e636500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007317d19889c6dcc9ce9b894133d33d8d51cbb60e00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000761646472657373000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';

    const iface = new ethers.Interface(abi);
    const res = iface.decodeFunctionResult('getCredential', hexResponse);

    const adapter = new OnchainNonMerklizedIssuerAdapter(
      {
        ...defaultEthConnectionConfig,
        url: 'http://localhost:8545',
        chainId: 80002
      },
      issuerDid,
      {
        merklizationOptions: {
          documentLoader: schemaLoaderForTests({ ipfsNodeURL: IPFS_URL })
        }
      }
    );
    const w3cCredential = await adapter.convertOnChainInfoToW3CCredential(
      res[0] as INonMerklizedIssuer.CredentialDataStructOutput,
      res[1] as bigint[],
      res[2] as INonMerklizedIssuer.SubjectFieldStructOutput[]
    );
    expect(W3CCredential.fromJSON(w3cIpfsSchemaExpect)).to.deep.eq(w3cCredential);
  });
});
