/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from 'ethers';
import type {
  CredentialStatusResolver,
  CredentialStatusResolverInterface
} from '../CredentialStatusResolver';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'id',
        type: 'uint256'
      },
      {
        internalType: 'uint64',
        name: 'nonce',
        type: 'uint64'
      }
    ],
    name: 'getRevocationStatus',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'state',
                type: 'uint256'
              },
              {
                internalType: 'uint256',
                name: 'claimsTreeRoot',
                type: 'uint256'
              },
              {
                internalType: 'uint256',
                name: 'revocationTreeRoot',
                type: 'uint256'
              },
              {
                internalType: 'uint256',
                name: 'rootOfRoots',
                type: 'uint256'
              }
            ],
            internalType: 'structIOnchainCredentialStatusResolver.IdentityStateRoots',
            name: 'issuer',
            type: 'tuple'
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'root',
                type: 'uint256'
              },
              {
                internalType: 'bool',
                name: 'existence',
                type: 'bool'
              },
              {
                internalType: 'uint256[]',
                name: 'siblings',
                type: 'uint256[]'
              },
              {
                internalType: 'uint256',
                name: 'index',
                type: 'uint256'
              },
              {
                internalType: 'uint256',
                name: 'value',
                type: 'uint256'
              },
              {
                internalType: 'bool',
                name: 'auxExistence',
                type: 'bool'
              },
              {
                internalType: 'uint256',
                name: 'auxIndex',
                type: 'uint256'
              },
              {
                internalType: 'uint256',
                name: 'auxValue',
                type: 'uint256'
              }
            ],
            internalType: 'structIOnchainCredentialStatusResolver.Proof',
            name: 'mtp',
            type: 'tuple'
          }
        ],
        internalType: 'structIOnchainCredentialStatusResolver.CredentialStatus',
        name: '',
        type: 'tuple'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'id',
        type: 'uint256'
      },
      {
        internalType: 'uint256',
        name: 'state',
        type: 'uint256'
      },
      {
        internalType: 'uint64',
        name: 'nonce',
        type: 'uint64'
      }
    ],
    name: 'getRevocationStatusByIdAndState',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'state',
                type: 'uint256'
              },
              {
                internalType: 'uint256',
                name: 'claimsTreeRoot',
                type: 'uint256'
              },
              {
                internalType: 'uint256',
                name: 'revocationTreeRoot',
                type: 'uint256'
              },
              {
                internalType: 'uint256',
                name: 'rootOfRoots',
                type: 'uint256'
              }
            ],
            internalType: 'structIOnchainCredentialStatusResolver.IdentityStateRoots',
            name: 'issuer',
            type: 'tuple'
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'root',
                type: 'uint256'
              },
              {
                internalType: 'bool',
                name: 'existence',
                type: 'bool'
              },
              {
                internalType: 'uint256[]',
                name: 'siblings',
                type: 'uint256[]'
              },
              {
                internalType: 'uint256',
                name: 'index',
                type: 'uint256'
              },
              {
                internalType: 'uint256',
                name: 'value',
                type: 'uint256'
              },
              {
                internalType: 'bool',
                name: 'auxExistence',
                type: 'bool'
              },
              {
                internalType: 'uint256',
                name: 'auxIndex',
                type: 'uint256'
              },
              {
                internalType: 'uint256',
                name: 'auxValue',
                type: 'uint256'
              }
            ],
            internalType: 'structIOnchainCredentialStatusResolver.Proof',
            name: 'mtp',
            type: 'tuple'
          }
        ],
        internalType: 'structIOnchainCredentialStatusResolver.CredentialStatus',
        name: '',
        type: 'tuple'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  }
] as const;

export class CredentialStatusResolver__factory {
  static readonly abi = _abi;
  static createInterface(): CredentialStatusResolverInterface {
    return new Interface(_abi) as CredentialStatusResolverInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): CredentialStatusResolver {
    return new Contract(address, _abi, runner) as unknown as CredentialStatusResolver;
  }
}
