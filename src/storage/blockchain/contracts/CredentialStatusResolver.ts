/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod
} from './common';

export interface CredentialStatusResolverInterface extends Interface {
  getFunction(
    nameOrSignature: 'getRevocationStatus' | 'getRevocationStatusByIdAndState'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'getRevocationStatus',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getRevocationStatusByIdAndState',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: 'getRevocationStatus', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getRevocationStatusByIdAndState',
    data: BytesLike
  ): Result;
}

export interface CredentialStatusResolver extends BaseContract {
  connect(runner?: ContractRunner | null): CredentialStatusResolver;
  waitForDeployment(): Promise<this>;

  interface: CredentialStatusResolverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  getRevocationStatus: TypedContractMethod<
    [id: BigNumberish, nonce: BigNumberish],
    [
      [
        [bigint, bigint, bigint, bigint] & {
          state: bigint;
          claimsTreeRoot: bigint;
          revocationTreeRoot: bigint;
          rootOfRoots: bigint;
        },
        [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
          root: bigint;
          existence: boolean;
          siblings: bigint[];
          index: bigint;
          value: bigint;
          auxExistence: boolean;
          auxIndex: bigint;
          auxValue: bigint;
        }
      ] & {
        issuer: [bigint, bigint, bigint, bigint] & {
          state: bigint;
          claimsTreeRoot: bigint;
          revocationTreeRoot: bigint;
          rootOfRoots: bigint;
        };
        mtp: [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
          root: bigint;
          existence: boolean;
          siblings: bigint[];
          index: bigint;
          value: bigint;
          auxExistence: boolean;
          auxIndex: bigint;
          auxValue: bigint;
        };
      }
    ],
    'view'
  >;

  getRevocationStatusByIdAndState: TypedContractMethod<
    [id: BigNumberish, state: BigNumberish, nonce: BigNumberish],
    [
      [
        [bigint, bigint, bigint, bigint] & {
          state: bigint;
          claimsTreeRoot: bigint;
          revocationTreeRoot: bigint;
          rootOfRoots: bigint;
        },
        [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
          root: bigint;
          existence: boolean;
          siblings: bigint[];
          index: bigint;
          value: bigint;
          auxExistence: boolean;
          auxIndex: bigint;
          auxValue: bigint;
        }
      ] & {
        issuer: [bigint, bigint, bigint, bigint] & {
          state: bigint;
          claimsTreeRoot: bigint;
          revocationTreeRoot: bigint;
          rootOfRoots: bigint;
        };
        mtp: [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
          root: bigint;
          existence: boolean;
          siblings: bigint[];
          index: bigint;
          value: bigint;
          auxExistence: boolean;
          auxIndex: bigint;
          auxValue: bigint;
        };
      }
    ],
    'view'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: 'getRevocationStatus'): TypedContractMethod<
    [id: BigNumberish, nonce: BigNumberish],
    [
      [
        [bigint, bigint, bigint, bigint] & {
          state: bigint;
          claimsTreeRoot: bigint;
          revocationTreeRoot: bigint;
          rootOfRoots: bigint;
        },
        [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
          root: bigint;
          existence: boolean;
          siblings: bigint[];
          index: bigint;
          value: bigint;
          auxExistence: boolean;
          auxIndex: bigint;
          auxValue: bigint;
        }
      ] & {
        issuer: [bigint, bigint, bigint, bigint] & {
          state: bigint;
          claimsTreeRoot: bigint;
          revocationTreeRoot: bigint;
          rootOfRoots: bigint;
        };
        mtp: [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
          root: bigint;
          existence: boolean;
          siblings: bigint[];
          index: bigint;
          value: bigint;
          auxExistence: boolean;
          auxIndex: bigint;
          auxValue: bigint;
        };
      }
    ],
    'view'
  >;
  getFunction(nameOrSignature: 'getRevocationStatusByIdAndState'): TypedContractMethod<
    [id: BigNumberish, state: BigNumberish, nonce: BigNumberish],
    [
      [
        [bigint, bigint, bigint, bigint] & {
          state: bigint;
          claimsTreeRoot: bigint;
          revocationTreeRoot: bigint;
          rootOfRoots: bigint;
        },
        [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
          root: bigint;
          existence: boolean;
          siblings: bigint[];
          index: bigint;
          value: bigint;
          auxExistence: boolean;
          auxIndex: bigint;
          auxValue: bigint;
        }
      ] & {
        issuer: [bigint, bigint, bigint, bigint] & {
          state: bigint;
          claimsTreeRoot: bigint;
          revocationTreeRoot: bigint;
          rootOfRoots: bigint;
        };
        mtp: [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
          root: bigint;
          existence: boolean;
          siblings: bigint[];
          index: bigint;
          value: bigint;
          auxExistence: boolean;
          auxIndex: bigint;
          auxValue: bigint;
        };
      }
    ],
    'view'
  >;

  filters: {};
}
