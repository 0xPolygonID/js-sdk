/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod
} from './common';

export interface IdentityBaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'getClaimProof'
      | 'getClaimProofByRoot'
      | 'getClaimsTreeRoot'
      | 'getId'
      | 'getIdentityLatestState'
      | 'getIsOldStateGenesis'
      | 'getLastClaimsRoot'
      | 'getLastRevocationsRoot'
      | 'getLastRootsRoot'
      | 'getRevocationProof'
      | 'getRevocationProofByRoot'
      | 'getRevocationStatus'
      | 'getRevocationStatusByIdAndState'
      | 'getRevocationsTreeRoot'
      | 'getRootProof'
      | 'getRootProofByRoot'
      | 'getRootsByState'
      | 'getRootsTreeRoot'
      | 'getSmtDepth'
      | 'initialize'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'getClaimProof', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'getClaimProofByRoot',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'getClaimsTreeRoot', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getIdentityLatestState', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getIsOldStateGenesis', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLastClaimsRoot', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLastRevocationsRoot', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLastRootsRoot', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRevocationProof', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'getRevocationProofByRoot',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getRevocationStatus',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getRevocationStatusByIdAndState',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'getRevocationsTreeRoot', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRootProof', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'getRootProofByRoot',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'getRootsByState', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getRootsTreeRoot', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getSmtDepth', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [AddressLike]): string;

  decodeFunctionResult(functionFragment: 'getClaimProof', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getClaimProofByRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getClaimsTreeRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getIdentityLatestState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getIsOldStateGenesis', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLastClaimsRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLastRevocationsRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLastRootsRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRevocationProof', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRevocationProofByRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRevocationStatus', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getRevocationStatusByIdAndState',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getRevocationsTreeRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRootProof', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRootProofByRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRootsByState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRootsTreeRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSmtDepth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
}

export interface IdentityBase extends BaseContract {
  connect(runner?: ContractRunner | null): IdentityBase;
  waitForDeployment(): Promise<this>;

  interface: IdentityBaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  getClaimProof: TypedContractMethod<
    [claimIndexHash: BigNumberish],
    [
      [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
        root: bigint;
        existence: boolean;
        siblings: bigint[];
        index: bigint;
        value: bigint;
        auxExistence: boolean;
        auxIndex: bigint;
        auxValue: bigint;
      }
    ],
    'view'
  >;

  getClaimProofByRoot: TypedContractMethod<
    [claimIndexHash: BigNumberish, root: BigNumberish],
    [
      [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
        root: bigint;
        existence: boolean;
        siblings: bigint[];
        index: bigint;
        value: bigint;
        auxExistence: boolean;
        auxIndex: bigint;
        auxValue: bigint;
      }
    ],
    'view'
  >;

  getClaimsTreeRoot: TypedContractMethod<[], [bigint], 'view'>;

  getId: TypedContractMethod<[], [bigint], 'view'>;

  getIdentityLatestState: TypedContractMethod<[], [bigint], 'view'>;

  getIsOldStateGenesis: TypedContractMethod<[], [boolean], 'view'>;

  getLastClaimsRoot: TypedContractMethod<[], [bigint], 'view'>;

  getLastRevocationsRoot: TypedContractMethod<[], [bigint], 'view'>;

  getLastRootsRoot: TypedContractMethod<[], [bigint], 'view'>;

  getRevocationProof: TypedContractMethod<
    [revocationNonce: BigNumberish],
    [
      [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
        root: bigint;
        existence: boolean;
        siblings: bigint[];
        index: bigint;
        value: bigint;
        auxExistence: boolean;
        auxIndex: bigint;
        auxValue: bigint;
      }
    ],
    'view'
  >;

  getRevocationProofByRoot: TypedContractMethod<
    [revocationNonce: BigNumberish, root: BigNumberish],
    [
      [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
        root: bigint;
        existence: boolean;
        siblings: bigint[];
        index: bigint;
        value: bigint;
        auxExistence: boolean;
        auxIndex: bigint;
        auxValue: bigint;
      }
    ],
    'view'
  >;

  getRevocationStatus: TypedContractMethod<
    [id: BigNumberish, nonce: BigNumberish],
    [
      [
        [bigint, bigint, bigint, bigint] & {
          state: bigint;
          claimsTreeRoot: bigint;
          revocationTreeRoot: bigint;
          rootOfRoots: bigint;
        },
        [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
          root: bigint;
          existence: boolean;
          siblings: bigint[];
          index: bigint;
          value: bigint;
          auxExistence: boolean;
          auxIndex: bigint;
          auxValue: bigint;
        }
      ] & {
        issuer: [bigint, bigint, bigint, bigint] & {
          state: bigint;
          claimsTreeRoot: bigint;
          revocationTreeRoot: bigint;
          rootOfRoots: bigint;
        };
        mtp: [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
          root: bigint;
          existence: boolean;
          siblings: bigint[];
          index: bigint;
          value: bigint;
          auxExistence: boolean;
          auxIndex: bigint;
          auxValue: bigint;
        };
      }
    ],
    'view'
  >;

  getRevocationStatusByIdAndState: TypedContractMethod<
    [id: BigNumberish, state: BigNumberish, nonce: BigNumberish],
    [
      [
        [bigint, bigint, bigint, bigint] & {
          state: bigint;
          claimsTreeRoot: bigint;
          revocationTreeRoot: bigint;
          rootOfRoots: bigint;
        },
        [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
          root: bigint;
          existence: boolean;
          siblings: bigint[];
          index: bigint;
          value: bigint;
          auxExistence: boolean;
          auxIndex: bigint;
          auxValue: bigint;
        }
      ] & {
        issuer: [bigint, bigint, bigint, bigint] & {
          state: bigint;
          claimsTreeRoot: bigint;
          revocationTreeRoot: bigint;
          rootOfRoots: bigint;
        };
        mtp: [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
          root: bigint;
          existence: boolean;
          siblings: bigint[];
          index: bigint;
          value: bigint;
          auxExistence: boolean;
          auxIndex: bigint;
          auxValue: bigint;
        };
      }
    ],
    'view'
  >;

  getRevocationsTreeRoot: TypedContractMethod<[], [bigint], 'view'>;

  getRootProof: TypedContractMethod<
    [claimsTreeRoot: BigNumberish],
    [
      [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
        root: bigint;
        existence: boolean;
        siblings: bigint[];
        index: bigint;
        value: bigint;
        auxExistence: boolean;
        auxIndex: bigint;
        auxValue: bigint;
      }
    ],
    'view'
  >;

  getRootProofByRoot: TypedContractMethod<
    [claimsTreeRoot: BigNumberish, root: BigNumberish],
    [
      [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
        root: bigint;
        existence: boolean;
        siblings: bigint[];
        index: bigint;
        value: bigint;
        auxExistence: boolean;
        auxIndex: bigint;
        auxValue: bigint;
      }
    ],
    'view'
  >;

  getRootsByState: TypedContractMethod<
    [state: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        claimsRoot: bigint;
        revocationsRoot: bigint;
        rootsRoot: bigint;
      }
    ],
    'view'
  >;

  getRootsTreeRoot: TypedContractMethod<[], [bigint], 'view'>;

  getSmtDepth: TypedContractMethod<[], [bigint], 'view'>;

  initialize: TypedContractMethod<[_stateContractAddr: AddressLike], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: 'getClaimProof'): TypedContractMethod<
    [claimIndexHash: BigNumberish],
    [
      [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
        root: bigint;
        existence: boolean;
        siblings: bigint[];
        index: bigint;
        value: bigint;
        auxExistence: boolean;
        auxIndex: bigint;
        auxValue: bigint;
      }
    ],
    'view'
  >;
  getFunction(nameOrSignature: 'getClaimProofByRoot'): TypedContractMethod<
    [claimIndexHash: BigNumberish, root: BigNumberish],
    [
      [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
        root: bigint;
        existence: boolean;
        siblings: bigint[];
        index: bigint;
        value: bigint;
        auxExistence: boolean;
        auxIndex: bigint;
        auxValue: bigint;
      }
    ],
    'view'
  >;
  getFunction(nameOrSignature: 'getClaimsTreeRoot'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'getId'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'getIdentityLatestState'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'getIsOldStateGenesis'): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(nameOrSignature: 'getLastClaimsRoot'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'getLastRevocationsRoot'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'getLastRootsRoot'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'getRevocationProof'): TypedContractMethod<
    [revocationNonce: BigNumberish],
    [
      [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
        root: bigint;
        existence: boolean;
        siblings: bigint[];
        index: bigint;
        value: bigint;
        auxExistence: boolean;
        auxIndex: bigint;
        auxValue: bigint;
      }
    ],
    'view'
  >;
  getFunction(nameOrSignature: 'getRevocationProofByRoot'): TypedContractMethod<
    [revocationNonce: BigNumberish, root: BigNumberish],
    [
      [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
        root: bigint;
        existence: boolean;
        siblings: bigint[];
        index: bigint;
        value: bigint;
        auxExistence: boolean;
        auxIndex: bigint;
        auxValue: bigint;
      }
    ],
    'view'
  >;
  getFunction(nameOrSignature: 'getRevocationStatus'): TypedContractMethod<
    [id: BigNumberish, nonce: BigNumberish],
    [
      [
        [bigint, bigint, bigint, bigint] & {
          state: bigint;
          claimsTreeRoot: bigint;
          revocationTreeRoot: bigint;
          rootOfRoots: bigint;
        },
        [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
          root: bigint;
          existence: boolean;
          siblings: bigint[];
          index: bigint;
          value: bigint;
          auxExistence: boolean;
          auxIndex: bigint;
          auxValue: bigint;
        }
      ] & {
        issuer: [bigint, bigint, bigint, bigint] & {
          state: bigint;
          claimsTreeRoot: bigint;
          revocationTreeRoot: bigint;
          rootOfRoots: bigint;
        };
        mtp: [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
          root: bigint;
          existence: boolean;
          siblings: bigint[];
          index: bigint;
          value: bigint;
          auxExistence: boolean;
          auxIndex: bigint;
          auxValue: bigint;
        };
      }
    ],
    'view'
  >;
  getFunction(nameOrSignature: 'getRevocationStatusByIdAndState'): TypedContractMethod<
    [id: BigNumberish, state: BigNumberish, nonce: BigNumberish],
    [
      [
        [bigint, bigint, bigint, bigint] & {
          state: bigint;
          claimsTreeRoot: bigint;
          revocationTreeRoot: bigint;
          rootOfRoots: bigint;
        },
        [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
          root: bigint;
          existence: boolean;
          siblings: bigint[];
          index: bigint;
          value: bigint;
          auxExistence: boolean;
          auxIndex: bigint;
          auxValue: bigint;
        }
      ] & {
        issuer: [bigint, bigint, bigint, bigint] & {
          state: bigint;
          claimsTreeRoot: bigint;
          revocationTreeRoot: bigint;
          rootOfRoots: bigint;
        };
        mtp: [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
          root: bigint;
          existence: boolean;
          siblings: bigint[];
          index: bigint;
          value: bigint;
          auxExistence: boolean;
          auxIndex: bigint;
          auxValue: bigint;
        };
      }
    ],
    'view'
  >;
  getFunction(nameOrSignature: 'getRevocationsTreeRoot'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'getRootProof'): TypedContractMethod<
    [claimsTreeRoot: BigNumberish],
    [
      [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
        root: bigint;
        existence: boolean;
        siblings: bigint[];
        index: bigint;
        value: bigint;
        auxExistence: boolean;
        auxIndex: bigint;
        auxValue: bigint;
      }
    ],
    'view'
  >;
  getFunction(nameOrSignature: 'getRootProofByRoot'): TypedContractMethod<
    [claimsTreeRoot: BigNumberish, root: BigNumberish],
    [
      [bigint, boolean, bigint[], bigint, bigint, boolean, bigint, bigint] & {
        root: bigint;
        existence: boolean;
        siblings: bigint[];
        index: bigint;
        value: bigint;
        auxExistence: boolean;
        auxIndex: bigint;
        auxValue: bigint;
      }
    ],
    'view'
  >;
  getFunction(nameOrSignature: 'getRootsByState'): TypedContractMethod<
    [state: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        claimsRoot: bigint;
        revocationsRoot: bigint;
        rootsRoot: bigint;
      }
    ],
    'view'
  >;
  getFunction(nameOrSignature: 'getRootsTreeRoot'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'getSmtDepth'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'initialize'
  ): TypedContractMethod<[_stateContractAddr: AddressLike], [void], 'nonpayable'>;

  filters: {};
}
