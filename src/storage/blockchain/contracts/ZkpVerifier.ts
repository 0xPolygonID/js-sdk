/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod
} from './common';

export declare namespace IZKPVerifier {
  export type ZKPRequestStruct = {
    metadata: string;
    validator: AddressLike;
    data: BytesLike;
  };

  export type ZKPRequestStructOutput = [metadata: string, validator: string, data: string] & {
    metadata: string;
    validator: string;
    data: string;
  };
}

export interface ZkpVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'REQUESTS_RETURN_LIMIT'
      | 'getZKPRequest'
      | 'getZKPRequests'
      | 'getZKPRequestsCount'
      | 'owner'
      | 'proofs'
      | 'renounceOwnership'
      | 'requestIdExists'
      | 'setZKPRequest'
      | 'submitZKPResponse'
      | 'transferOwnership'
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;

  encodeFunctionData(functionFragment: 'REQUESTS_RETURN_LIMIT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getZKPRequest', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'getZKPRequests',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'getZKPRequestsCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proofs', values: [AddressLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'requestIdExists', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'setZKPRequest',
    values: [BigNumberish, IZKPVerifier.ZKPRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'submitZKPResponse',
    values: [
      BigNumberish,
      BigNumberish[],
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;

  decodeFunctionResult(functionFragment: 'REQUESTS_RETURN_LIMIT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getZKPRequest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getZKPRequests', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getZKPRequestsCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proofs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestIdExists', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setZKPRequest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'submitZKPResponse', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZkpVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): ZkpVerifier;
  waitForDeployment(): Promise<this>;

  interface: ZkpVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  REQUESTS_RETURN_LIMIT: TypedContractMethod<[], [bigint], 'view'>;

  getZKPRequest: TypedContractMethod<
    [requestId: BigNumberish],
    [IZKPVerifier.ZKPRequestStructOutput],
    'view'
  >;

  getZKPRequests: TypedContractMethod<
    [startIndex: BigNumberish, length: BigNumberish],
    [IZKPVerifier.ZKPRequestStructOutput[]],
    'view'
  >;

  getZKPRequestsCount: TypedContractMethod<[], [bigint], 'view'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  proofs: TypedContractMethod<[arg0: AddressLike, arg1: BigNumberish], [boolean], 'view'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  requestIdExists: TypedContractMethod<[requestId: BigNumberish], [boolean], 'view'>;

  setZKPRequest: TypedContractMethod<
    [requestId: BigNumberish, request: IZKPVerifier.ZKPRequestStruct],
    [void],
    'nonpayable'
  >;

  submitZKPResponse: TypedContractMethod<
    [
      requestId: BigNumberish,
      inputs: BigNumberish[],
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish]
    ],
    [void],
    'nonpayable'
  >;

  transferOwnership: TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: 'REQUESTS_RETURN_LIMIT'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getZKPRequest'
  ): TypedContractMethod<[requestId: BigNumberish], [IZKPVerifier.ZKPRequestStructOutput], 'view'>;
  getFunction(
    nameOrSignature: 'getZKPRequests'
  ): TypedContractMethod<
    [startIndex: BigNumberish, length: BigNumberish],
    [IZKPVerifier.ZKPRequestStructOutput[]],
    'view'
  >;
  getFunction(nameOrSignature: 'getZKPRequestsCount'): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'owner'): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'proofs'
  ): TypedContractMethod<[arg0: AddressLike, arg1: BigNumberish], [boolean], 'view'>;
  getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'requestIdExists'
  ): TypedContractMethod<[requestId: BigNumberish], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'setZKPRequest'
  ): TypedContractMethod<
    [requestId: BigNumberish, request: IZKPVerifier.ZKPRequestStruct],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'submitZKPResponse'
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      inputs: BigNumberish[],
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish]
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'transferOwnership'
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  getEvent(
    key: 'OwnershipTransferred'
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
